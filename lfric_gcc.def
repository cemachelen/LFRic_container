Bootstrap: docker
From: ubuntu:22.04

%files
files/arch-GCC_LINUX.env /opt
files/keyword.cfg /opt
files/mosrs-cache-password /opt
files/mosrs-check /opt
files/mosrs-setup-gpg-agent /opt
files/psyclone_new.cfg /opt


%post
# Build stack


#Update and install pre-built software stack. 
apt-get -y update 
apt-get -y install ibutils iproute2 kmod 
apt-get -y install build-essential make cmake git python2 python3 python3-pip automake wget python3-pycurl subversion vim gcc gfortran  hostname nano procps psmisc rsync python3-sphinx csh bzip2 m4 zlib1g-dev subversion  libxml2-dev curl libcurl4-openssl-dev unzip emacs nano gedit time liburi-perl perl libperl-dev libdbd-mysql-perl libdatetime-perl libjson-perl libxml-simple-perl libtest-simple-perl libgl1 python3-sphinx g++ libc6-dev 


dpkg-reconfigure dash

#set locale
export LC_ALL=C

#### cd /&&tar zxvf /opt/container.tgz

BUILD_DIR=/opt/build
BASE_DIR=/container
mkdir -p $BASE_DIR
mkdir -p $BUILD_DIR

NCORES=8

FCM_VERSION=2021.05.0
CYLC_VERSION=8.3.4
ROSE_VERSION=2.1.0

MPICH=4.2.1
HDF5=1.14.5
NETCDF4=4.9.2
NETCDF_FORTRAN=4.5.3
NETCDF_CXX=4.2
YAXT=0.11.3
PFUNIT=4.10.0
PSYCLONE=3.0.0

#fcm
cd $BASE_DIR
wget https://github.com/metomi/fcm/archive/${FCM_VERSION}.tar.gz && \
            tar xfz ${FCM_VERSION}.tar.gz && \
      	    rm -f ${FCM_VERSION}.tar.gz fcm && \
      	    ln -s fcm-${FCM_VERSION} fcm
cp /opt/keyword*.cfg fcm/etc/fcm
rm -f /opt/keyword*.cfg
cp /opt/mo* fcm/bin
rm -f /opt/mo*

cp -p /usr/lib/gnupg2/gpg* /usr/libexec/

#cylc rose 

curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python3 get-pip.py
python3 -m pip install requests
rm get-pip.py
python3 -m pip install metomi-rose
python3 -m pip install cylc-flow cylc-rose
python3 -m pip install tornado


export NETCDF_DIR=$BASE_DIR/netcdf
export MPICH_DIR=$BASE_DIR/mpich
export INSTALL_DIR=$BASE_DIR/usr
export CPPFLAGS="-I$INSTALL_DIR/include -I$NETCDF_DIR/include"
export FFLAGS="-I$MPICH_DIR/include -I$INSTALL_DIR/include -I$NETCDF_DIR/include"
export LDFLAGS="-L$INSTALL_DIR/lib -L$NETCDF_DIR/lib"
export PATH=$MPICH_DIR/bin:$NETCDF_DIR/bin:$INSTALL_DIR/bin:$PATH
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$NETCDF_DIR/lib:$INSTALL_DIR/lib:$LD_LIBRARY_PATH


cd $BUILD_DIR
wget http://www.mpich.org/static/downloads/$MPICH/mpich-$MPICH.tar.gz
tar -xzf mpich-$MPICH.tar.gz
cd mpich-$MPICH
FC=gfortran FCFLAGS=-fallow-argument-mismatch CFLAGS="-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64" ./configure --prefix=/container/mpich/ --enable-fortran=all --enable-cxx --enable-threads-multiple --enable-shared --enable-romio 
make -j $NCORES
make check
make install

export PATH=/container/mpich/bin/:$PATH


#hdf5
cd $BUILD_DIR
wget https://support.hdfgroup.org/releases/hdf5/v1_14/v1_14_5/downloads/hdf5-${HDF5}.tar.gz
tar -xzf hdf5-$HDF5.tar.gz
cd $BUILD_DIR/hdf5-$HDF5
CC=mpicc FC=mpif90 ./configure --prefix=$NETCDF_DIR --enable-shared --enable-fortran --enable-fortran2003 --enable-parallel --enable-hl --enable-shared --enable-static --with-zlib --with-szlib=/usr/local 
make -j$NCORES
make install

cd $BUILD_DIR
wget https://downloads.unidata.ucar.edu/netcdf-c/4.9.2/netcdf-c-4.9.2.tar.gz
tar -xzf netcdf-c-4.9.2.tar.gz
cd netcdf-c-4.9.2
wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -O $BUILD_DIR/netcdf-c-4.9.2/config.guess
wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD'  -O $BUILD_DIR/netcdf-c-4.9.2/config.sub
CC=mpicc CXX=mpicxx FF=mpif90 FC=mpif90 ./configure --prefix=$NETCDF_DIR --disable-dap --disable-dap-remote-tests
make -j $NCORES
make check # This runs checks, so check results before installing
make install

export LIBS="-lnetcdf -lhdf5_hl -lhdf5 -ldl -lm -lz"

cd $BUILD_DIR
wget https://downloads.unidata.ucar.edu/netcdf-fortran/4.5.3/netcdf-fortran-4.5.3.tar.gz
tar -xzf netcdf-fortran-4.5.3.tar.gz
cd netcdf-fortran-4.5.3
wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -O $BUILD_DIR/netcdf-fortran-4.5.3/config.guess
wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD'  -O $BUILD_DIR/netcdf-fortran-4.5.3/config.sub
CC=mpicc CXX=mpicxx FF=mpif90 FC=mpif90 ./configure --prefix=$NETCDF_DIR
make -j $NCORES
make check # This runs checks, so check results before installing
make install

cd $BUILD_DIR
wget https://downloads.unidata.ucar.edu/netcdf-cxx/4.2/netcdf-cxx-4.2.tar.gz
tar -xzf netcdf-cxx-4.2.tar.gz
cd netcdf-cxx-4.2
#wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -O $BUILD_DIR/netcdf-cxx-4.2/config.guess
#wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD'  -O $BUILD_DIR/netcdf-cxx-4.2/config.sub
CC=mpicc CXX=mpicxx FF=mpif90 FC=mpif90 ./configure --prefix=$NETCDF_DIR
make -j $NCORES
make check # This runs checks, so check results before installing
make install


export LIBS='-lnetcdff -lnetcdf -lhdf5_hl -lhdf5'


#yaxt
cd $BUILD_DIR
wget https://swprojects.dkrz.de/redmine/attachments/download/541/yaxt-$YAXT.tar.gz
tar -xzf yaxt-$YAXT.tar.gz
cd $BUILD_DIR/yaxt-$YAXT
./configure --prefix=$INSTALL_DIR --with-idxtype=long CC=mpicc FC=mpif90 FPP="mpif90 -E -cpp"
make -j$NCORES
make install


#XIOS 
cd $BUILD_DIR
export NETCDF_DIR
export HDF5_DIR=$NETCDF_DIR 
svn --non-interactive --trust-server-cert-failures=cn-mismatch co https://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/trunk@2252 XIOS 
cd $BUILD_DIR/XIOS
MY_FFLAGS="-ffree-line-length-200"
cp arch/arch-GCC_LINUX.fcm arch/arch-GCC_LINUX.fcm.original
      sed -i "s|\(^%BASE_FFLAGS.*$\)|\1 ${MY_FFLAGS}|g" arch/arch-GCC_LINUX.fcm
cp arch/arch-GCC_LINUX.env arch/arch-GCC_LINUX.env.original
cp /opt/arch-GCC_LINUX.env arch/ 
FC=gfortran
LDMPI='mpif90'
./make_xios \
        --arch GCC_LINUX \
        --full \
        --job 8 && 

cp lib/* $INSTALL_DIR/lib
cp inc/* $INSTALL_DIR/include
mkdir -p $INSTALL_DIR/bin
cp bin/* $INSTALL_DIR/bin


#pFUnit
cd $BUILD_DIR
git clone --recursive https://github.com/Goddard-Fortran-Ecosystem/pFUnit
cd pFUnit
export F90_VENDOR=gnu
export F90=gfortran
export MPIF90=mpif90
#Hack for python2
cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DMPI=YES -DOPENMP=YES -DROBUST=YES -DMAX_RANK=6 ../pFUnit
make -j $NCORES
make tests
make install
#rm $INSTALL_DIR/bin/python

#Clean up
cd $BASE_DIR
rm -fr $BUILD_DIR

#Psyclone
python3 -m pip install --no-cache-dir  --upgrade pip
#python3 -m pip install --upgrade setuptools
python3 -m pip install Jinja2
# JE - instead of using release version of PSyclone, use the latest commit to main 
# as the release versions can be out of date
#git clone --recursive https://github.com/stfc/PSyclone.git
#cd PSyclone
#pip install .[psydata]
python3 -m pip install PSyclone==$PSYCLONE
python3 -m pip install scitools-iris
python3 -m pip install geovista
python3 -m pip install esmf_regrid
python3 -m pip install ipython
ln -s /usr/bin/python3 $INSTALL_DIR/bin/python
mv /opt/psyclone_new.cfg /container/psyclone_new.cfg

%environment

export LC_ALL=C
export BASE_DIR=/container
export INSTALL_DIR=$BASE_DIR/usr
export MPICH_DIR=$BASE_DIR/mpich
export PFUNIT=$INSTALL_DIR
export NETCDF_DIR=$BASE_DIR/netcdf
export CPPFLAGS="-I$INSTALL_DIR/include -I$NETCDF_DIR/include"
export FFLAGS="-I$INSTALL_DIR/include -I$INSTALL_DIR/mod -I$NETCDF_DIR/include -I$MPICH_DIR/include"
export LDFLAGS="-L$INSTALL_DIR/lib -L$NETCDF_DIR/lib"
export PATH=$NETCDF_DIR/bin:$INSTALL_DIR/bin:$BASE_DIR/fcm/bin/:$MPICH_DIR/bin:$PATH
# JE - use up-to-date PSyclone from git repo directly
export PSYCLONE_CONFIG=/container/psyclone_new.cfg
export CYLC_VERSION=8
#Library path
export LD_LIBRARY_PATH="$LOCAL_LD_LIBRARY_PATH:/lib:$NETCDF_DIR/lib:$INSTALL_DIR/lib:$LD_LIBRARY_PATH:/usr/lib64:/usr/lib64/libibverbs:/usr/lib/host:/lib/x86_64-linux-gnu"

export FC=gfortran
export FPP="cpp -traditional-cpp"
export LDMPI=mpif90

%runscript
#Unset CRAY program env
#unset PE_ENV


